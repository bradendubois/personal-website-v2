{"version":3,"sources":["logo.svg","projects/ProjectLink.tsx","projects/ProjectHeader.tsx","projects/ProjectDescription.tsx","projects/ProjectTag.tsx","projects/ProjectTags.tsx","projects/Project.tsx","serviceWorker.js","Homepage.tsx","index.js"],"names":["module","exports","ProjectLink","props","className","href","url","src","image","path","alt","ProjectHeader","links","map","link","title","ProjectDescription","description","ProjectTag","type","display","ProjectTags","tagList","tags","tag","Project","Boolean","window","location","hostname","match","githubLogo","externalLinkIcon","Homepage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,sPCc5BC,MAVf,SAAqBC,GACjB,OACI,yBAAKC,UAAW,eACZ,uBAAGC,KAAMF,EAAMG,KACX,yBAAKC,IAAKJ,EAAMK,MAAMC,KAAMC,IAAKP,EAAMK,MAAME,S,MCc9CC,MAjBf,SAAuBR,GAGnB,IAAIS,EAAQT,EAAMS,MAAMC,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAaR,IAAKQ,EAAKR,IAAKE,MAAOM,EAAKN,WAE9E,OACI,yBAAKJ,UAAW,mBACZ,yBAAKA,UAAW,kBACZ,2BAAID,EAAMY,QAEd,yBAAKX,UAAW,kBACXQ,K,MCHFI,MARf,SAA4Bb,GACxB,OACI,yBAAKC,UAAW,wBACZ,2BAAID,EAAMc,e,KCEPC,MANf,SAAoBf,GAChB,OACI,yBAAKC,UAAWD,EAAMgB,MAAOhB,EAAMiB,UCW5BC,MAZf,SAAqBlB,GAGjB,IAAImB,EAAUnB,EAAMoB,KAAKV,KAAI,SAACW,GAAD,OAAS,kBAAC,EAAD,CAAYL,KAAMK,EAAIL,KAAMC,QAASI,EAAIJ,aAE/E,OACI,yBAAKhB,UAAW,iBACXkB,ICOEG,MAVf,SAAiBtB,GACb,OACI,yBAAKC,UAAW,aACZ,kBAAC,EAAD,CAAeW,MAAOZ,EAAMY,MAAOH,MAAOT,EAAMS,QAChD,kBAAC,EAAD,CAAoBK,YAAad,EAAMc,cACvC,kBAAC,EAAD,CAAaM,KAAMpB,EAAMoB,SCFjBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAIC,EAAa,8BACbC,EAAmB,2BAkBRC,MAhBf,WACI,OACI,6BACI,kBAAC,EAAD,CACIlB,MAAO,aACPE,YAAa,yIACbL,MAAO,CACH,CAACN,IAAK,sCAAuCE,MAAO,CAACC,KAAMsB,EAAYrB,IAAK,gBAC5E,CAACJ,IAAK,+BAAgCE,MAAO,CAACC,KAAMuB,EAAkBtB,IAAK,wBAE/Ea,KAAM,CAAC,CAACJ,KAAM,OAAQC,QAAS,UAAW,CAACD,KAAM,MAAOC,QAAS,cCRjFc,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SFuHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9772e9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\n\nimport './ProjectLink.scss';\n\nfunction ProjectLink(props: {url: string; image: {path: string; alt: string;}}) {\n    return (\n        <div className={\"projectLink\"}>\n            <a href={props.url}>\n                <img src={props.image.path} alt={props.image.alt} />\n            </a>\n        </div>\n    )\n}\n\nexport default ProjectLink;","import React from 'react';\nimport ProjectLink from \"./ProjectLink\";\n\nimport './ProjectHeader.scss';\n\nfunction ProjectHeader(props: {title: string; links: {url: string; image: {path: string; alt: string}}[]}) {\n\n    // Map each link{url, image} to a proper ProjectLink object\n    let links = props.links.map((link) => <ProjectLink url={link.url} image={link.image}/>);\n\n    return (\n        <div className={\"headerContainer\"}>\n            <div className={\"titleContainer\"}>\n                <p>{props.title}</p>\n            </div>\n            <div className={\"linksContainer\"}>\n                {links}\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectHeader;","import React from 'react';\n\nimport \"./ProjectDescription.scss\";\n\n\nfunction ProjectDescription(props: {description: string;}) {\n    return (\n        <div className={\"descriptionContainer\"}>\n            <p>{props.description}</p>\n        </div>\n    )\n}\n\nexport default ProjectDescription;\n","import React from 'react';\n\nimport './ProjectTags.scss';\n\nfunction ProjectTag(props: {type: string, display: string;}) {\n    return (\n        <div className={props.type}>{props.display}</div>\n    )\n}\n\nexport default ProjectTag;","import React from 'react';\nimport ProjectTag from './ProjectTag';\n\nimport './ProjectTags.scss';\n\nfunction ProjectTags(props : {tags: {type: string; display: string;}[]}) {\n\n    // Map each tag to a proper ProjectTag\n    let tagList = props.tags.map((tag) => <ProjectTag type={tag.type} display={tag.display} />);\n\n    return (\n        <div className={\"tagsContainer\"}>\n            {tagList}\n        </div>\n    )\n}\n\nexport default ProjectTags;","import React from 'react';\n\nimport './Project.scss';\n\n// Project components\nimport ProjectHeader from \"./ProjectHeader\";\nimport ProjectDescription from \"./ProjectDescription\";\nimport ProjectTags from \"./ProjectTags\";\n\nfunction Project(props: {title: string; links: {url: string; image: {path: string; alt: string}}[]; description: string; tags: {type: string; display: string;}[]}) {\n    return (\n        <div className={\"container\"}>\n            <ProjectHeader title={props.title} links={props.links}/>\n            <ProjectDescription description={props.description}/>\n            <ProjectTags tags={props.tags}/>\n        </div>\n    );\n}\n\nexport default Project;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n// import githubLogo from \"../public/Github-Mark-Light-64px.jpg\"\nimport Project from \"./projects/Project\";\n\nlet githubLogo = \"/GitHub-Mark-Light-64px.png\";\nlet externalLinkIcon = \"/external_link_light.png\";\n\nfunction Homepage() {\n    return (\n        <div>\n            <Project\n                title={\"My Project\"}\n                description={\"This is a test project; this is some test text to show the flow of a description of a project if the description were relatively long.\"}\n                links={[\n                    {url: \"https://www.github.com/bradendubois\", image: {path: githubLogo, alt: \"Github Logo\"}},\n                    {url: \"https://www.bradendubois.dev\", image: {path: externalLinkIcon, alt: \"External Link Icon\"}}\n                    ]}\n                tags={[{type: \"html\", display: \"HTML 5\"}, {type: \"css\", display: \"CSS 3\"}]}\n            />\n        </div>\n    )\n}\n\nexport default Homepage;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport Homepage from \"./Homepage\";\n\nReactDOM.render(<Homepage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}